Here are some sample benchmark results for tests done against the trivial web servers in python3, golang, nodejs, ...

Specs:
- Ryzen 2700X stock.
- Ubuntu 18.04, kernel 5.3
- Node v12
- golang 1.12
- Not 100% sure about memory Latency, but I am guessing its no worse than around 70-80ns as these are gaming UDIMMs.
not the best kit ever, but obviously far better than server RDIMM or LRDIMMs. Still I dont think makes that much of a 
diff, as these programs are so small they all fit in cache.


# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# =========================================================== wrk config: ./wrk -t 16 -c 400 -d 10 http://localhost:7081


# ======================================================================================================================
# ============================================================================================= 22k req/s - nodejs based
# trivial web server in nodejs using the http package.
# its async, but no real multi-core benefit.

Running 10s test @ http://localhost:7081
  16 threads and 400 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    18.05ms    2.51ms 254.95ms   95.43%
    Req/Sec     1.38k   296.17    11.45k    97.64%
  221127 requests in 10.07s, 37.12MB read
Requests/sec:  21952.51
Transfer/sec:      3.68MB


# ======================================================================================================================
# =========================================================================================== 265k req/s - golang based:
# trivial web server in golang using the http and gorilla/mux packages. (16 threads, all nearly max out in this test)


Running 10s test @ http://localhost:7081
  16 threads and 400 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency     1.81ms    2.07ms 209.13ms   89.34%
    Req/Sec    16.84k     2.64k   46.43k    72.91%
  2671422 requests in 10.08s, 323.55MB read
Requests/sec: 265031.57
Transfer/sec:     32.10MB

# ======================================================================================================================
# =========================================================================================== 180 req/s ~ python3 based:
# -------------------- wse_cheroot.py
# python3, cheroot, bottle, nothing being logged per request.:

Running 10s test @ http://localhost:7081
  16 threads and 400 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   145.56ms  208.30ms   1.90s    93.80%
    Req/Sec    22.77     15.64    90.00     70.87%
  1800 requests in 10.08s, 264.08KB read
  Socket errors: connect 0, read 404, write 0, timeout 26
Requests/sec:    178.52
Transfer/sec:     26.19KB


# ======================================================================================================================
# =========================================================================================== 300 req/s ~ python3 based:
# -------------------- wse_gevent.py
# python3, bottle, monkey patch gevent, one line logged per request):

Running 10s test @ http://localhost:7081
  16 threads and 400 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   237.28ms  506.79ms   1.95s    87.31%
    Req/Sec    52.23     51.79   320.00     88.61%
  3051 requests in 10.09s, 378.62KB read
  Socket errors: connect 0, read 0, write 0, timeout 711
Requests/sec:    302.47
Transfer/sec:     37.54KB


# ======================================================================================================================
# ======================================================================================================================
# -------------------- wse_gunc.py
# python3, gunicorn, no bottle. just wsgi app. 4 workers, ran inside a docker container. it does spike a few CPUs
# gunicorn -b 0.0.0.0:7081 -w 4 wse_gunc:ws

Running 10s test @ http://localhost:7081
  16 threads and 400 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   135.40ms   65.88ms   1.79s    96.40%
    Req/Sec    75.62     66.65   252.00     73.92%
  10037 requests in 10.07s, 1.53MB read
  Socket errors: connect 0, read 0, write 0, timeout 2
Requests/sec:    996.30
Transfer/sec:    155.67KB

# ======================================================================================================================
# ======================================================================================================================
# -------------------- wse_gunc.py
# python3, gunicorn, no bottle. just wsgi app. 4 workers, ran inside a docker container.
# it spikes all CPUs, to absolute 100%. to the point, mouse movement gets laggy. still no more than 2500 req/s

# gunicorn -b 0.0.0.0:7081 -w 16 wse_gunc:ws

Running 10s test @ http://localhost:7081
  16 threads and 400 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    72.15ms   94.42ms   1.73s    96.28%
    Req/Sec   158.94     84.10   440.00     67.97%
  24971 requests in 10.10s, 3.81MB read
  Socket errors: connect 0, read 0, write 0, timeout 11
Requests/sec:   2471.59
Transfer/sec:    386.19KB


# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# ======================================================================================================================
# ============================================================ wrk config: ./wrk -t 16 -c 40 -d 10 http://localhost:7081


# ======================================================================================================================
# ============================================================================================================== python3

# gunicorn w/ 16 workers

Running 10s test @ http://localhost:7081
  16 threads and 40 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    12.21ms    1.85ms  39.88ms   77.69%
    Req/Sec   163.45     10.48   242.00     74.43%
  26148 requests in 10.07s, 3.99MB read
Requests/sec:   2596.87
Transfer/sec:    405.76KB

***** Latency is less disasterous now, but req/s is still pretty poor.
that may not matter if its not the bottleneck.


